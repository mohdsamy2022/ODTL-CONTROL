
on-demand-traffic-light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000afc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000afc  00000b90  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800062  00800062  00000b92  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000bc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a2  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000822  00000000  00000000  00001eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000aad  00000000  00000000  000026d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c4  00000000  00000000  00003184  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a3  00000000  00000000  00003348  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000697  00000000  00000000  000037eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003e82  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c8 01 	jmp	0x390	; 0x390 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 36       	cpi	r26, 0x63	; 99
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 66 02 	call	0x4cc	; 0x4cc <main>
  8a:	0c 94 7c 05 	jmp	0xaf8	; 0xaf8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint8_t normalmode = 1; 
void APP_init(void)
{
	
	//initialize car led ports and pins
	LED_init(CAR_LED_PORT,CAR_LED_PIN_Gr);
  92:	60 e0       	ldi	r22, 0x00	; 0
  94:	81 e4       	ldi	r24, 0x41	; 65
  96:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LED_init>
	LED_init(CAR_LED_PORT,CAR_LED_PIN_Ye);
  9a:	61 e0       	ldi	r22, 0x01	; 1
  9c:	81 e4       	ldi	r24, 0x41	; 65
  9e:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LED_init>
	LED_init(CAR_LED_PORT,CAR_LED_PIN_Re);
  a2:	62 e0       	ldi	r22, 0x02	; 2
  a4:	81 e4       	ldi	r24, 0x41	; 65
  a6:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LED_init>
	
	//initialize pedestrian led ports and pins
	LED_init(PED_LED_PORT,PED_LED_PIN_Gr);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	82 e4       	ldi	r24, 0x42	; 66
  ae:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LED_init>
	LED_init(PED_LED_PORT,PED_LED_PIN_Ye);
  b2:	61 e0       	ldi	r22, 0x01	; 1
  b4:	82 e4       	ldi	r24, 0x42	; 66
  b6:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LED_init>
	LED_init(PED_LED_PORT,PED_LED_PIN_Re);
  ba:	62 e0       	ldi	r22, 0x02	; 2
  bc:	82 e4       	ldi	r24, 0x42	; 66
  be:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <LED_init>
	
	//Button initialization
	BUTTON_init(BUTTON_1_PORT,BUTTON_1_PIN);
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	84 e4       	ldi	r24, 0x44	; 68
  c6:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <BUTTON_init>
			}
		}
	}
	*/
	//Timer initialization
	TIMER_init();
  ca:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <TIMER_init>
	
	
	sei();                     //enable global interrupts
  ce:	78 94       	sei
	RISING_EDGE_SETUP();     //rising edge sense
  d0:	85 b7       	in	r24, 0x35	; 53
  d2:	83 60       	ori	r24, 0x03	; 3
  d4:	85 bf       	out	0x35, r24	; 53
  d6:	08 95       	ret

000000d8 <APP_start>:

	//normalmode=0;
	//SETUP_INT0();            //enable external interrupts INT0
}
void APP_start(void)
{
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
		#define BIT_IS_CLEAR(byte, bit) (!(byte & (1 << bit)))
		#define BIT_IS_SET(byte, bit) (byte & (1 << bit))
		#define button_debounce 20 //ms
		uint16_t timer = 0;
  dc:	c0 e0       	ldi	r28, 0x00	; 0
  de:	d0 e0       	ldi	r29, 0x00	; 0
		while(BIT_IS_SET(PIND, PIN2))
  e0:	05 c0       	rjmp	.+10     	; 0xec <APP_start+0x14>
		{ // button hold down
			timer++; // count how long button is pressed
  e2:	21 96       	adiw	r28, 0x01	; 1
			TIMER_delay(1);
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TIMER_delay>
{
		#define BIT_IS_CLEAR(byte, bit) (!(byte & (1 << bit)))
		#define BIT_IS_SET(byte, bit) (byte & (1 << bit))
		#define button_debounce 20 //ms
		uint16_t timer = 0;
		while(BIT_IS_SET(PIND, PIN2))
  ec:	82 99       	sbic	0x10, 2	; 16
  ee:	f9 cf       	rjmp	.-14     	; 0xe2 <APP_start+0xa>
		{ // button hold down
			timer++; // count how long button is pressed
			TIMER_delay(1);
		}
		if(timer > button_debounce)
  f0:	c5 31       	cpi	r28, 0x15	; 21
  f2:	d1 05       	cpc	r29, r1
  f4:	30 f0       	brcs	.+12     	; 0x102 <APP_start+0x2a>
		{                        // software debouncing button
			if(timer < 500)
  f6:	c4 3f       	cpi	r28, 0xF4	; 244
  f8:	d1 40       	sbci	r29, 0x01	; 1
  fa:	18 f4       	brcc	.+6      	; 0x102 <APP_start+0x2a>
			{                       //unsigned long
				//single click
				//DIO_write(PIND,PIN2,HIGH);
				SETUP_INT0();
  fc:	8b b7       	in	r24, 0x3b	; 59
  fe:	80 64       	ori	r24, 0x40	; 64
 100:	8b bf       	out	0x3b, r24	; 59
			}

		}
	//if normal mode or  car green led or yellow is on
	uint8_t i;
	if(normalmode || carLED==0 || carLED==1)  //green=0 yellow=1
 102:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 106:	81 11       	cpse	r24, r1
 108:	07 c0       	rjmp	.+14     	; 0x118 <APP_start+0x40>
 10a:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <__data_end>
 10e:	99 23       	and	r25, r25
 110:	19 f0       	breq	.+6      	; 0x118 <APP_start+0x40>
 112:	91 30       	cpi	r25, 0x01	; 1
 114:	09 f0       	breq	.+2      	; 0x118 <APP_start+0x40>
 116:	dd c0       	rjmp	.+442    	; 0x2d2 <APP_start+0x1fa>
	{
		if(!normalmode)
 118:	81 11       	cpse	r24, r1
 11a:	03 c0       	rjmp	.+6      	; 0x122 <APP_start+0x4a>
		{
			carLED=1;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
		}
		//set Pedestrian LEDs
		LED_off(PED_LED_PORT,PED_LED_PIN_Gr);
 122:	60 e0       	ldi	r22, 0x00	; 0
 124:	82 e4       	ldi	r24, 0x42	; 66
 126:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
		LED_off(PED_LED_PORT,PED_LED_PIN_Ye);
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	82 e4       	ldi	r24, 0x42	; 66
 12e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
		//LED_off(PED_LED_PORT,PED_LED_PIN_Re);  //ped red led remain on
		
		switch(carLED)
 132:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	21 f1       	breq	.+72     	; 0x182 <APP_start+0xaa>
 13a:	20 f0       	brcs	.+8      	; 0x144 <APP_start+0x6c>
 13c:	82 30       	cpi	r24, 0x02	; 2
 13e:	09 f4       	brne	.+2      	; 0x142 <APP_start+0x6a>
 140:	a1 c0       	rjmp	.+322    	; 0x284 <APP_start+0x1ac>
 142:	c0 c0       	rjmp	.+384    	; 0x2c4 <APP_start+0x1ec>
		{
			
			case 0: //green led
			LED_on(CAR_LED_PORT,CAR_LED_PIN_Gr);
 144:	60 e0       	ldi	r22, 0x00	; 0
 146:	81 e4       	ldi	r24, 0x41	; 65
 148:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
			LED_off(CAR_LED_PORT,CAR_LED_PIN_Ye);
 14c:	61 e0       	ldi	r22, 0x01	; 1
 14e:	81 e4       	ldi	r24, 0x41	; 65
 150:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
			LED_off(CAR_LED_PORT,CAR_LED_PIN_Re);
 154:	62 e0       	ldi	r22, 0x02	; 2
 156:	81 e4       	ldi	r24, 0x41	; 65
 158:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
			
			for(i=0;i<50;i++)
 15c:	c0 e0       	ldi	r28, 0x00	; 0
 15e:	09 c0       	rjmp	.+18     	; 0x172 <APP_start+0x9a>
			{
				TIMER_delay(60);
 160:	8c e3       	ldi	r24, 0x3C	; 60
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TIMER_delay>
				if(!normalmode)break;         //check  ISR 
 168:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 16c:	88 23       	and	r24, r24
 16e:	19 f0       	breq	.+6      	; 0x176 <APP_start+0x9e>
			case 0: //green led
			LED_on(CAR_LED_PORT,CAR_LED_PIN_Gr);
			LED_off(CAR_LED_PORT,CAR_LED_PIN_Ye);
			LED_off(CAR_LED_PORT,CAR_LED_PIN_Re);
			
			for(i=0;i<50;i++)
 170:	cf 5f       	subi	r28, 0xFF	; 255
 172:	c2 33       	cpi	r28, 0x32	; 50
 174:	a8 f3       	brcs	.-22     	; 0x160 <APP_start+0x88>
			{
				TIMER_delay(60);
				if(!normalmode)break;         //check  ISR 
			}
			carLED=1;
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			prevcarLED=0;
 17c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <prevcarLED>
			break;
 180:	04 c1       	rjmp	.+520    	; 0x38a <APP_start+0x2b2>
			
			case 1:  //yellow led
			
			if(!normalmode)
 182:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 186:	81 11       	cpse	r24, r1
 188:	5e c0       	rjmp	.+188    	; 0x246 <APP_start+0x16e>
			{                    //blink yellow in car & pedestrian
				if(prevcarLED!=2)
 18a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <prevcarLED>
 18e:	82 30       	cpi	r24, 0x02	; 2
 190:	69 f1       	breq	.+90     	; 0x1ec <APP_start+0x114>
				{
					LED_on(PED_LED_PORT,PED_LED_PIN_Re);
 192:	62 e0       	ldi	r22, 0x02	; 2
 194:	82 e4       	ldi	r24, 0x42	; 66
 196:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
					
					for(i=0;i<5;i++){
 19a:	c0 e0       	ldi	r28, 0x00	; 0
 19c:	25 c0       	rjmp	.+74     	; 0x1e8 <APP_start+0x110>
						LED_on(CAR_LED_PORT,CAR_LED_PIN_Ye);  //blinking every second
 19e:	61 e0       	ldi	r22, 0x01	; 1
 1a0:	81 e4       	ldi	r24, 0x41	; 65
 1a2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
						LED_on(PED_LED_PORT,PED_LED_PIN_Ye);
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	82 e4       	ldi	r24, 0x42	; 66
 1aa:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
						TIMER_delay(400);
 1ae:	80 e9       	ldi	r24, 0x90	; 144
 1b0:	91 e0       	ldi	r25, 0x01	; 1
 1b2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TIMER_delay>
						LED_off(CAR_LED_PORT,CAR_LED_PIN_Ye);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	81 e4       	ldi	r24, 0x41	; 65
 1ba:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
						LED_off(PED_LED_PORT,PED_LED_PIN_Ye);
 1be:	61 e0       	ldi	r22, 0x01	; 1
 1c0:	82 e4       	ldi	r24, 0x42	; 66
 1c2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
						TIMER_delay(200);
 1c6:	88 ec       	ldi	r24, 0xC8	; 200
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TIMER_delay>
						LED_on(CAR_LED_PORT,CAR_LED_PIN_Ye);
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	81 e4       	ldi	r24, 0x41	; 65
 1d2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
						LED_on(PED_LED_PORT,PED_LED_PIN_Ye);
 1d6:	61 e0       	ldi	r22, 0x01	; 1
 1d8:	82 e4       	ldi	r24, 0x42	; 66
 1da:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
						TIMER_delay(400);
 1de:	80 e9       	ldi	r24, 0x90	; 144
 1e0:	91 e0       	ldi	r25, 0x01	; 1
 1e2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TIMER_delay>
			{                    //blink yellow in car & pedestrian
				if(prevcarLED!=2)
				{
					LED_on(PED_LED_PORT,PED_LED_PIN_Re);
					
					for(i=0;i<5;i++){
 1e6:	cf 5f       	subi	r28, 0xFF	; 255
 1e8:	c5 30       	cpi	r28, 0x05	; 5
 1ea:	c8 f2       	brcs	.-78     	; 0x19e <APP_start+0xc6>
						LED_on(CAR_LED_PORT,CAR_LED_PIN_Ye);
						LED_on(PED_LED_PORT,PED_LED_PIN_Ye);
						TIMER_delay(400);
					}
				}
				prevcarLED=1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
				carLED=2;
 1f2:	82 e0       	ldi	r24, 0x02	; 2
 1f4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
				LED_on(CAR_LED_PORT,CAR_LED_PIN_Re);
 1f8:	62 e0       	ldi	r22, 0x02	; 2
 1fa:	81 e4       	ldi	r24, 0x41	; 65
 1fc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
 200:	25 c0       	rjmp	.+74     	; 0x24c <APP_start+0x174>
				}else{
				//blink car yellow led
				for(i=0;i<5;i++){
					LED_on(CAR_LED_PORT,CAR_LED_PIN_Ye);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	81 e4       	ldi	r24, 0x41	; 65
 206:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
					TIMER_delay(400);
 20a:	80 e9       	ldi	r24, 0x90	; 144
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TIMER_delay>
					LED_off(CAR_LED_PORT,CAR_LED_PIN_Ye);
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	81 e4       	ldi	r24, 0x41	; 65
 216:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
					TIMER_delay(200);
 21a:	88 ec       	ldi	r24, 0xC8	; 200
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TIMER_delay>
					LED_on(CAR_LED_PORT,CAR_LED_PIN_Ye);
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	81 e4       	ldi	r24, 0x41	; 65
 226:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
					TIMER_delay(400);
 22a:	80 e9       	ldi	r24, 0x90	; 144
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TIMER_delay>
					if(!normalmode)
 232:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 236:	81 11       	cpse	r24, r1
 238:	04 c0       	rjmp	.+8      	; 0x242 <APP_start+0x16a>
					{                //check  ISR 
						prevcarLED=1;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
						break;
 240:	05 c0       	rjmp	.+10     	; 0x24c <APP_start+0x174>
				prevcarLED=1;
				carLED=2;
				LED_on(CAR_LED_PORT,CAR_LED_PIN_Re);
				}else{
				//blink car yellow led
				for(i=0;i<5;i++){
 242:	cf 5f       	subi	r28, 0xFF	; 255
 244:	01 c0       	rjmp	.+2      	; 0x248 <APP_start+0x170>
 246:	c0 e0       	ldi	r28, 0x00	; 0
 248:	c5 30       	cpi	r28, 0x05	; 5
 24a:	d8 f2       	brcs	.-74     	; 0x202 <APP_start+0x12a>
						prevcarLED=1;
						break;
					}
				}
			}
			LED_off(CAR_LED_PORT,CAR_LED_PIN_Ye);
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	81 e4       	ldi	r24, 0x41	; 65
 250:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
			LED_off(PED_LED_PORT,PED_LED_PIN_Ye);
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	82 e4       	ldi	r24, 0x42	; 66
 258:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
			
			if(prevcarLED==0)
 25c:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <prevcarLED>
 260:	81 11       	cpse	r24, r1
 262:	07 c0       	rjmp	.+14     	; 0x272 <APP_start+0x19a>
			{
				carLED=2;
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
				prevcarLED=1;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
 270:	8c c0       	rjmp	.+280    	; 0x38a <APP_start+0x2b2>
				}
				else if(prevcarLED==2)
 272:	82 30       	cpi	r24, 0x02	; 2
 274:	09 f0       	breq	.+2      	; 0x278 <APP_start+0x1a0>
 276:	89 c0       	rjmp	.+274    	; 0x38a <APP_start+0x2b2>
				{
				carLED=0;
 278:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
				prevcarLED=1;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
 282:	83 c0       	rjmp	.+262    	; 0x38a <APP_start+0x2b2>
			}
			break;
			//Case RED LED
			case 2:
			LED_off(CAR_LED_PORT,CAR_LED_PIN_Gr);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	81 e4       	ldi	r24, 0x41	; 65
 288:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
			LED_off(CAR_LED_PORT,CAR_LED_PIN_Ye);
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	81 e4       	ldi	r24, 0x41	; 65
 290:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
			LED_on(CAR_LED_PORT,CAR_LED_PIN_Re);
 294:	62 e0       	ldi	r22, 0x02	; 2
 296:	81 e4       	ldi	r24, 0x41	; 65
 298:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
			for(i=0;i<50;i++)
 29c:	c0 e0       	ldi	r28, 0x00	; 0
 29e:	09 c0       	rjmp	.+18     	; 0x2b2 <APP_start+0x1da>
			{
				TIMER_delay(60);
 2a0:	8c e3       	ldi	r24, 0x3C	; 60
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TIMER_delay>
				if(!normalmode)break;
 2a8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 2ac:	88 23       	and	r24, r24
 2ae:	19 f0       	breq	.+6      	; 0x2b6 <APP_start+0x1de>
			//Case RED LED
			case 2:
			LED_off(CAR_LED_PORT,CAR_LED_PIN_Gr);
			LED_off(CAR_LED_PORT,CAR_LED_PIN_Ye);
			LED_on(CAR_LED_PORT,CAR_LED_PIN_Re);
			for(i=0;i<50;i++)
 2b0:	cf 5f       	subi	r28, 0xFF	; 255
 2b2:	c2 33       	cpi	r28, 0x32	; 50
 2b4:	a8 f3       	brcs	.-22     	; 0x2a0 <APP_start+0x1c8>
			{
				TIMER_delay(60);
				if(!normalmode)break;
			}
			prevcarLED=2;
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
			carLED=1;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			break;
 2c2:	63 c0       	rjmp	.+198    	; 0x38a <APP_start+0x2b2>
			default:
			carLED=2;
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
			prevcarLED=1;
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
			break;
 2d0:	5c c0       	rjmp	.+184    	; 0x38a <APP_start+0x2b2>
		
		}
		else
		{
		//Configure PED LEDs
		LED_on(PED_LED_PORT,PED_LED_PIN_Gr);
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	82 e4       	ldi	r24, 0x42	; 66
 2d6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
		LED_off(PED_LED_PORT,PED_LED_PIN_Ye);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	82 e4       	ldi	r24, 0x42	; 66
 2de:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
		LED_off(PED_LED_PORT,PED_LED_PIN_Re);
 2e2:	62 e0       	ldi	r22, 0x02	; 2
 2e4:	82 e4       	ldi	r24, 0x42	; 66
 2e6:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
		
		//Configure CAR LEDs
		LED_off(CAR_LED_PORT,CAR_LED_PIN_Gr);
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	81 e4       	ldi	r24, 0x41	; 65
 2ee:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
		LED_off(CAR_LED_PORT,CAR_LED_PIN_Ye);
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	81 e4       	ldi	r24, 0x41	; 65
 2f6:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
		LED_on(CAR_LED_PORT,CAR_LED_PIN_Re);
 2fa:	62 e0       	ldi	r22, 0x02	; 2
 2fc:	81 e4       	ldi	r24, 0x41	; 65
 2fe:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
		TIMER_delay(5000);                      //5 sec delay
 302:	88 e8       	ldi	r24, 0x88	; 136
 304:	93 e1       	ldi	r25, 0x13	; 19
 306:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TIMER_delay>
		
		//make sure car red light is off
		LED_off(CAR_LED_PORT,CAR_LED_PIN_Re);
 30a:	62 e0       	ldi	r22, 0x02	; 2
 30c:	81 e4       	ldi	r24, 0x41	; 65
 30e:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
		
		//blink both yellow while ped green is on
		for(i=0;i<5;i++){
 312:	c0 e0       	ldi	r28, 0x00	; 0
 314:	25 c0       	rjmp	.+74     	; 0x360 <APP_start+0x288>
			LED_on(CAR_LED_PORT,CAR_LED_PIN_Ye);
 316:	61 e0       	ldi	r22, 0x01	; 1
 318:	81 e4       	ldi	r24, 0x41	; 65
 31a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
			LED_on(PED_LED_PORT,PED_LED_PIN_Ye);
 31e:	61 e0       	ldi	r22, 0x01	; 1
 320:	82 e4       	ldi	r24, 0x42	; 66
 322:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
			TIMER_delay(400);
 326:	80 e9       	ldi	r24, 0x90	; 144
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TIMER_delay>
			LED_off(CAR_LED_PORT,CAR_LED_PIN_Ye);
 32e:	61 e0       	ldi	r22, 0x01	; 1
 330:	81 e4       	ldi	r24, 0x41	; 65
 332:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
			LED_off(PED_LED_PORT,PED_LED_PIN_Ye);
 336:	61 e0       	ldi	r22, 0x01	; 1
 338:	82 e4       	ldi	r24, 0x42	; 66
 33a:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
			TIMER_delay(200);
 33e:	88 ec       	ldi	r24, 0xC8	; 200
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TIMER_delay>
			LED_on(CAR_LED_PORT,CAR_LED_PIN_Ye);
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	81 e4       	ldi	r24, 0x41	; 65
 34a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
			LED_on(PED_LED_PORT,PED_LED_PIN_Ye);
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	82 e4       	ldi	r24, 0x42	; 66
 352:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
			TIMER_delay(400);
 356:	80 e9       	ldi	r24, 0x90	; 144
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <TIMER_delay>
		
		//make sure car red light is off
		LED_off(CAR_LED_PORT,CAR_LED_PIN_Re);
		
		//blink both yellow while ped green is on
		for(i=0;i<5;i++){
 35e:	cf 5f       	subi	r28, 0xFF	; 255
 360:	c5 30       	cpi	r28, 0x05	; 5
 362:	c8 f2       	brcs	.-78     	; 0x316 <APP_start+0x23e>
			LED_on(CAR_LED_PORT,CAR_LED_PIN_Ye);
			LED_on(PED_LED_PORT,PED_LED_PIN_Ye);
			TIMER_delay(400);
		}
		//Turn off yellow LEDs
		LED_off(CAR_LED_PORT,CAR_LED_PIN_Ye);
 364:	61 e0       	ldi	r22, 0x01	; 1
 366:	81 e4       	ldi	r24, 0x41	; 65
 368:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
		LED_off(PED_LED_PORT,PED_LED_PIN_Ye);
 36c:	61 e0       	ldi	r22, 0x01	; 1
 36e:	82 e4       	ldi	r24, 0x42	; 66
 370:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LED_off>
		//turn on PED red LED
		LED_on(PED_LED_PORT,PED_LED_PIN_Re);
 374:	62 e0       	ldi	r22, 0x02	; 2
 376:	82 e4       	ldi	r24, 0x42	; 66
 378:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <LED_on>
		//reset normalmode
		normalmode=1;
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		//Configure carLED variables
		carLED=0;
 382:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
		prevcarLED=1;
 386:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <prevcarLED>
	}
	
}
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	08 95       	ret

00000390 <__vector_1>:

//#define BIT_IS_CLEAR(byte, bit) (!(byte & (1 << bit)))
//#define BIT_IS_SET(byte, bit) (byte & (1 << bit))
//#define button_debounce 10 //ms
ISR(EXT_INT_0)
{
 390:	1f 92       	push	r1
 392:	0f 92       	push	r0
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	0f 92       	push	r0
 398:	11 24       	eor	r1, r1
	
	normalmode=0;
 39a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>

		}
		//normalmode=0;
	}*/
	
		  }
 39e:	0f 90       	pop	r0
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	0f 90       	pop	r0
 3a4:	1f 90       	pop	r1
 3a6:	18 95       	reti

000003a8 <BUTTON_init>:
#include "botton.h"

//botton initialization
void BUTTON_init(uint8_t buttonPort,uint8_t buttonPin)
{
	DIO_init(buttonPort,buttonPin,IN);   //botton is input device
 3a8:	40 e0       	ldi	r20, 0x00	; 0
 3aa:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_init>
 3ae:	08 95       	ret

000003b0 <LED_init>:



void LED_init(uint8_t ledPort,uint8_t ledPin)
{
	DIO_init(ledPort,ledPin,OUT);      //led is output device
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <DIO_init>
 3b6:	08 95       	ret

000003b8 <LED_on>:
}
void LED_on(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort,ledPin,HIGH);  //high to turn on the led
 3b8:	41 e0       	ldi	r20, 0x01	; 1
 3ba:	0e 94 e5 02 	call	0x5ca	; 0x5ca <DIO_write>
 3be:	08 95       	ret

000003c0 <LED_off>:
}
void LED_off(uint8_t ledPort,uint8_t ledPin)
{
	DIO_write(ledPort,ledPin,LOW);     //low to turn the led off
 3c0:	40 e0       	ldi	r20, 0x00	; 0
 3c2:	0e 94 e5 02 	call	0x5ca	; 0x5ca <DIO_write>
 3c6:	08 95       	ret

000003c8 <TIMER_init>:
#include <math.h>
#include "../../Utilities/bitman.h"

void TIMER_init()
{
	TCCR0 = 0x00; //normal mode
 3c8:	13 be       	out	0x33, r1	; 51
 3ca:	08 95       	ret

000003cc <TIMER_delay>:
}
void TIMER_delay(uint16_t Tdelay)
{
 3cc:	8f 92       	push	r8
 3ce:	9f 92       	push	r9
 3d0:	af 92       	push	r10
 3d2:	bf 92       	push	r11
 3d4:	cf 92       	push	r12
 3d6:	df 92       	push	r13
 3d8:	ef 92       	push	r14
 3da:	ff 92       	push	r15
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	ec 01       	movw	r28, r24
	uint32_t overFlowcount=0;


	Ttick = 256.0/1000.0;    //ms    Ttick = Presc/FCPU    prescaler=256
	Tmaxdelay= 65.536;      //ms		Tmaxdelay = Ttick * 2^8
	if(Tdelay<Tmaxdelay)
 3e2:	bc 01       	movw	r22, r24
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 89 04 	call	0x912	; 0x912 <__floatunsisf>
 3ec:	6b 01       	movw	r12, r22
 3ee:	7c 01       	movw	r14, r24
 3f0:	2f e6       	ldi	r18, 0x6F	; 111
 3f2:	32 e1       	ldi	r19, 0x12	; 18
 3f4:	43 e8       	ldi	r20, 0x83	; 131
 3f6:	52 e4       	ldi	r21, 0x42	; 66
 3f8:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <__cmpsf2>
 3fc:	88 23       	and	r24, r24
 3fe:	9c f4       	brge	.+38     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	{
		TimerInitial = (Tmaxdelay-Tdelay)/Ttick;
 400:	a7 01       	movw	r20, r14
 402:	96 01       	movw	r18, r12
 404:	6f e6       	ldi	r22, 0x6F	; 111
 406:	72 e1       	ldi	r23, 0x12	; 18
 408:	83 e8       	ldi	r24, 0x83	; 131
 40a:	92 e4       	ldi	r25, 0x42	; 66
 40c:	0e 94 5f 03 	call	0x6be	; 0x6be <__subsf3>
 410:	2f e6       	ldi	r18, 0x6F	; 111
 412:	32 e1       	ldi	r19, 0x12	; 18
 414:	43 e8       	ldi	r20, 0x83	; 131
 416:	5e e3       	ldi	r21, 0x3E	; 62
 418:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__divsf3>
 41c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fixunssfsi>
		Noverflows = 1;    //no overflow case
 420:	c1 e0       	ldi	r28, 0x01	; 1
 422:	d0 e0       	ldi	r29, 0x00	; 0
 424:	35 c0       	rjmp	.+106    	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		
		}
		else if(Tdelay == (int)Tmaxdelay)
 426:	c1 34       	cpi	r28, 0x41	; 65
 428:	d1 05       	cpc	r29, r1
 42a:	79 f1       	breq	.+94     	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
		TimerInitial=0;
		Noverflows=1;   //no overflow case
		}
		else
		{
		Noverflows = ceil((double)Tdelay/Tmaxdelay);                 //overflow case
 42c:	2f e6       	ldi	r18, 0x6F	; 111
 42e:	32 e1       	ldi	r19, 0x12	; 18
 430:	43 e8       	ldi	r20, 0x83	; 131
 432:	52 e4       	ldi	r21, 0x42	; 66
 434:	c7 01       	movw	r24, r14
 436:	b6 01       	movw	r22, r12
 438:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__divsf3>
 43c:	0e 94 cc 03 	call	0x798	; 0x798 <ceil>
 440:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fixunssfsi>
 444:	4b 01       	movw	r8, r22
 446:	5c 01       	movw	r10, r24
 448:	eb 01       	movw	r28, r22
		TimerInitial = (1<<8) - ((double)Tdelay/Ttick)/Noverflows;   //timer initial= 2^8 - ((Tdelay/Ttick)/Noverflows)
 44a:	2f e6       	ldi	r18, 0x6F	; 111
 44c:	32 e1       	ldi	r19, 0x12	; 18
 44e:	43 e8       	ldi	r20, 0x83	; 131
 450:	5e e3       	ldi	r21, 0x3E	; 62
 452:	c7 01       	movw	r24, r14
 454:	b6 01       	movw	r22, r12
 456:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__divsf3>
 45a:	6b 01       	movw	r12, r22
 45c:	7c 01       	movw	r14, r24
 45e:	b4 01       	movw	r22, r8
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 89 04 	call	0x912	; 0x912 <__floatunsisf>
 468:	9b 01       	movw	r18, r22
 46a:	ac 01       	movw	r20, r24
 46c:	c7 01       	movw	r24, r14
 46e:	b6 01       	movw	r22, r12
 470:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <__divsf3>
 474:	9b 01       	movw	r18, r22
 476:	ac 01       	movw	r20, r24
 478:	60 e0       	ldi	r22, 0x00	; 0
 47a:	70 e0       	ldi	r23, 0x00	; 0
 47c:	80 e8       	ldi	r24, 0x80	; 128
 47e:	93 e4       	ldi	r25, 0x43	; 67
 480:	0e 94 5f 03 	call	0x6be	; 0x6be <__subsf3>
 484:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__fixunssfsi>
 488:	03 c0       	rjmp	.+6      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
		Noverflows = 1;    //no overflow case
		
		}
		else if(Tdelay == (int)Tmaxdelay)
		{
		TimerInitial=0;
 48a:	60 e0       	ldi	r22, 0x00	; 0
		Noverflows=1;   //no overflow case
 48c:	c1 e0       	ldi	r28, 0x01	; 1
 48e:	d0 e0       	ldi	r29, 0x00	; 0
		{
		Noverflows = ceil((double)Tdelay/Tmaxdelay);                 //overflow case
		TimerInitial = (1<<8) - ((double)Tdelay/Ttick)/Noverflows;   //timer initial= 2^8 - ((Tdelay/Ttick)/Noverflows)
		
	}
	TCNT0 = TimerInitial;
 490:	62 bf       	out	0x32, r22	; 50
	TCCR0 |= (1<<2);     //set 256 prescaler
 492:	83 b7       	in	r24, 0x33	; 51
 494:	84 60       	ori	r24, 0x04	; 4
 496:	83 bf       	out	0x33, r24	; 51
{
	uint16_t Noverflows;  //define variables
	uint16_t TimerInitial;
	double Tmaxdelay;
	double Ttick;
	uint32_t overFlowcount=0;
 498:	20 e0       	ldi	r18, 0x00	; 0
 49a:	30 e0       	ldi	r19, 0x00	; 0
		TimerInitial = (1<<8) - ((double)Tdelay/Ttick)/Noverflows;   //timer initial= 2^8 - ((Tdelay/Ttick)/Noverflows)
		
	}
	TCNT0 = TimerInitial;
	TCCR0 |= (1<<2);     //set 256 prescaler
	while(overFlowcount<Noverflows)
 49c:	08 c0       	rjmp	.+16     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
	{
		//busy wait
		while(READ_BIT(TIFR,0)==0);   //TIFR (time interrupt flag register)
 49e:	08 b6       	in	r0, 0x38	; 56
 4a0:	00 fe       	sbrs	r0, 0
 4a2:	fd cf       	rjmp	.-6      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		//clear overflow flag
		SET_BIT(TIFR,0);
 4a4:	88 b7       	in	r24, 0x38	; 56
 4a6:	81 60       	ori	r24, 0x01	; 1
 4a8:	88 bf       	out	0x38, r24	; 56
		
		overFlowcount++;  //increment counter
 4aa:	2f 5f       	subi	r18, 0xFF	; 255
 4ac:	3f 4f       	sbci	r19, 0xFF	; 255
		TimerInitial = (1<<8) - ((double)Tdelay/Ttick)/Noverflows;   //timer initial= 2^8 - ((Tdelay/Ttick)/Noverflows)
		
	}
	TCNT0 = TimerInitial;
	TCCR0 |= (1<<2);     //set 256 prescaler
	while(overFlowcount<Noverflows)
 4ae:	2c 17       	cp	r18, r28
 4b0:	3d 07       	cpc	r19, r29
 4b2:	a8 f3       	brcs	.-22     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
		SET_BIT(TIFR,0);
		
		overFlowcount++;  //increment counter
	}
	//Timer stop
	TCCR0 = 0x00;
 4b4:	13 be       	out	0x33, r1	; 51
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	ff 90       	pop	r15
 4bc:	ef 90       	pop	r14
 4be:	df 90       	pop	r13
 4c0:	cf 90       	pop	r12
 4c2:	bf 90       	pop	r11
 4c4:	af 90       	pop	r10
 4c6:	9f 90       	pop	r9
 4c8:	8f 90       	pop	r8
 4ca:	08 95       	ret

000004cc <main>:


int main(void)
{
	//Initialize
	APP_init();
 4cc:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	//while loop
	while(1)
	{
		APP_start();
 4d0:	0e 94 6c 00 	call	0xd8	; 0xd8 <APP_start>
 4d4:	fd cf       	rjmp	.-6      	; 0x4d0 <main+0x4>

000004d6 <DIO_init>:

//define dio initialization function for ports A ,B ,C AND D

void DIO_init(uint8_t portNumber, uint8_t pinNumber, uint8_t direction)
{
	switch(portNumber)
 4d6:	82 34       	cpi	r24, 0x42	; 66
 4d8:	31 f1       	breq	.+76     	; 0x526 <DIO_init+0x50>
 4da:	18 f4       	brcc	.+6      	; 0x4e2 <DIO_init+0xc>
 4dc:	81 34       	cpi	r24, 0x41	; 65
 4de:	39 f0       	breq	.+14     	; 0x4ee <DIO_init+0x18>
 4e0:	08 95       	ret
 4e2:	83 34       	cpi	r24, 0x43	; 67
 4e4:	e1 f1       	breq	.+120    	; 0x55e <DIO_init+0x88>
 4e6:	84 34       	cpi	r24, 0x44	; 68
 4e8:	09 f4       	brne	.+2      	; 0x4ec <DIO_init+0x16>
 4ea:	54 c0       	rjmp	.+168    	; 0x594 <DIO_init+0xbe>
 4ec:	08 95       	ret
	{
		case PORT_A:
			if(direction == IN){
 4ee:	41 11       	cpse	r20, r1
 4f0:	0c c0       	rjmp	.+24     	; 0x50a <DIO_init+0x34>
				CLEAR_BIT(DDRA,pinNumber);
 4f2:	2a b3       	in	r18, 0x1a	; 26
 4f4:	81 e0       	ldi	r24, 0x01	; 1
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <DIO_init+0x28>
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	6a 95       	dec	r22
 500:	e2 f7       	brpl	.-8      	; 0x4fa <DIO_init+0x24>
 502:	80 95       	com	r24
 504:	82 23       	and	r24, r18
 506:	8a bb       	out	0x1a, r24	; 26
 508:	08 95       	ret
			}else if (direction == OUT){
 50a:	41 30       	cpi	r20, 0x01	; 1
 50c:	09 f0       	breq	.+2      	; 0x510 <DIO_init+0x3a>
 50e:	5c c0       	rjmp	.+184    	; 0x5c8 <DIO_init+0xf2>
				SET_BIT(DDRA,pinNumber);
 510:	2a b3       	in	r18, 0x1a	; 26
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_init+0x46>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	6a 95       	dec	r22
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_init+0x42>
 520:	82 2b       	or	r24, r18
 522:	8a bb       	out	0x1a, r24	; 26
 524:	08 95       	ret
			}
			else{}
			break;
		case PORT_B:
			if(direction == IN){
 526:	41 11       	cpse	r20, r1
 528:	0c c0       	rjmp	.+24     	; 0x542 <DIO_init+0x6c>
				CLEAR_BIT(DDRB,pinNumber);
 52a:	27 b3       	in	r18, 0x17	; 23
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_init+0x60>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	6a 95       	dec	r22
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_init+0x5c>
 53a:	80 95       	com	r24
 53c:	82 23       	and	r24, r18
 53e:	87 bb       	out	0x17, r24	; 23
 540:	08 95       	ret
			}else if (direction == OUT){
 542:	41 30       	cpi	r20, 0x01	; 1
 544:	09 f0       	breq	.+2      	; 0x548 <DIO_init+0x72>
 546:	40 c0       	rjmp	.+128    	; 0x5c8 <DIO_init+0xf2>
				SET_BIT(DDRB,pinNumber);
 548:	27 b3       	in	r18, 0x17	; 23
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_init+0x7e>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	6a 95       	dec	r22
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_init+0x7a>
 558:	82 2b       	or	r24, r18
 55a:	87 bb       	out	0x17, r24	; 23
 55c:	08 95       	ret
			}
			else{}
			break;
		case PORT_C:
			if(direction == IN){
 55e:	41 11       	cpse	r20, r1
 560:	0c c0       	rjmp	.+24     	; 0x57a <DIO_init+0xa4>
				CLEAR_BIT(DDRC,pinNumber);
 562:	24 b3       	in	r18, 0x14	; 20
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 c0       	rjmp	.+4      	; 0x56e <DIO_init+0x98>
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	6a 95       	dec	r22
 570:	e2 f7       	brpl	.-8      	; 0x56a <DIO_init+0x94>
 572:	80 95       	com	r24
 574:	82 23       	and	r24, r18
 576:	84 bb       	out	0x14, r24	; 20
 578:	08 95       	ret
			}else if (direction == OUT){
 57a:	41 30       	cpi	r20, 0x01	; 1
 57c:	29 f5       	brne	.+74     	; 0x5c8 <DIO_init+0xf2>
				SET_BIT(DDRC,pinNumber);
 57e:	24 b3       	in	r18, 0x14	; 20
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_init+0xb4>
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	6a 95       	dec	r22
 58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_init+0xb0>
 58e:	82 2b       	or	r24, r18
 590:	84 bb       	out	0x14, r24	; 20
 592:	08 95       	ret
			}
			else{}
			break;
		case PORT_D:
			if(direction == IN){
 594:	41 11       	cpse	r20, r1
 596:	0c c0       	rjmp	.+24     	; 0x5b0 <DIO_init+0xda>
				CLEAR_BIT(DDRD,pinNumber);
 598:	21 b3       	in	r18, 0x11	; 17
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <DIO_init+0xce>
 5a0:	88 0f       	add	r24, r24
 5a2:	99 1f       	adc	r25, r25
 5a4:	6a 95       	dec	r22
 5a6:	e2 f7       	brpl	.-8      	; 0x5a0 <DIO_init+0xca>
 5a8:	80 95       	com	r24
 5aa:	82 23       	and	r24, r18
 5ac:	81 bb       	out	0x11, r24	; 17
 5ae:	08 95       	ret
			}else if (direction == OUT){
 5b0:	41 30       	cpi	r20, 0x01	; 1
 5b2:	51 f4       	brne	.+20     	; 0x5c8 <DIO_init+0xf2>
				SET_BIT(DDRD,pinNumber);
 5b4:	21 b3       	in	r18, 0x11	; 17
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <DIO_init+0xea>
 5bc:	88 0f       	add	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	6a 95       	dec	r22
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <DIO_init+0xe6>
 5c4:	82 2b       	or	r24, r18
 5c6:	81 bb       	out	0x11, r24	; 17
 5c8:	08 95       	ret

000005ca <DIO_write>:
}

//define DIO WRITE functions for port A ,B,C,D
void DIO_write(uint8_t portNumber, uint8_t pinNumber, uint8_t value)
{
	switch(portNumber){
 5ca:	82 34       	cpi	r24, 0x42	; 66
 5cc:	31 f1       	breq	.+76     	; 0x61a <DIO_write+0x50>
 5ce:	18 f4       	brcc	.+6      	; 0x5d6 <DIO_write+0xc>
 5d0:	81 34       	cpi	r24, 0x41	; 65
 5d2:	39 f0       	breq	.+14     	; 0x5e2 <DIO_write+0x18>
 5d4:	08 95       	ret
 5d6:	83 34       	cpi	r24, 0x43	; 67
 5d8:	e1 f1       	breq	.+120    	; 0x652 <DIO_write+0x88>
 5da:	84 34       	cpi	r24, 0x44	; 68
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <DIO_write+0x16>
 5de:	54 c0       	rjmp	.+168    	; 0x688 <DIO_write+0xbe>
 5e0:	08 95       	ret
		case PORT_A:
			if(value == LOW)
 5e2:	41 11       	cpse	r20, r1
 5e4:	0c c0       	rjmp	.+24     	; 0x5fe <DIO_write+0x34>
			{
				CLEAR_BIT(PORTA,pinNumber);
 5e6:	2b b3       	in	r18, 0x1b	; 27
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <DIO_write+0x28>
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	6a 95       	dec	r22
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <DIO_write+0x24>
 5f6:	80 95       	com	r24
 5f8:	82 23       	and	r24, r18
 5fa:	8b bb       	out	0x1b, r24	; 27
 5fc:	08 95       	ret
			}
			else if (value == HIGH)
 5fe:	41 30       	cpi	r20, 0x01	; 1
 600:	09 f0       	breq	.+2      	; 0x604 <DIO_write+0x3a>
 602:	5c c0       	rjmp	.+184    	; 0x6bc <DIO_write+0xf2>
			{
				SET_BIT(PORTA,pinNumber);
 604:	2b b3       	in	r18, 0x1b	; 27
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_write+0x46>
 60c:	88 0f       	add	r24, r24
 60e:	99 1f       	adc	r25, r25
 610:	6a 95       	dec	r22
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_write+0x42>
 614:	82 2b       	or	r24, r18
 616:	8b bb       	out	0x1b, r24	; 27
 618:	08 95       	ret
			}
			else{}
		break;
		case PORT_B:
			if(value == LOW)
 61a:	41 11       	cpse	r20, r1
 61c:	0c c0       	rjmp	.+24     	; 0x636 <DIO_write+0x6c>
			{
				CLEAR_BIT(PORTB,pinNumber);  //WRITE 0
 61e:	28 b3       	in	r18, 0x18	; 24
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	02 c0       	rjmp	.+4      	; 0x62a <DIO_write+0x60>
 626:	88 0f       	add	r24, r24
 628:	99 1f       	adc	r25, r25
 62a:	6a 95       	dec	r22
 62c:	e2 f7       	brpl	.-8      	; 0x626 <DIO_write+0x5c>
 62e:	80 95       	com	r24
 630:	82 23       	and	r24, r18
 632:	88 bb       	out	0x18, r24	; 24
 634:	08 95       	ret
			}
			else if (value == HIGH)
 636:	41 30       	cpi	r20, 0x01	; 1
 638:	09 f0       	breq	.+2      	; 0x63c <DIO_write+0x72>
 63a:	40 c0       	rjmp	.+128    	; 0x6bc <DIO_write+0xf2>
			{
				SET_BIT(PORTB,pinNumber);  //WRITE 1
 63c:	28 b3       	in	r18, 0x18	; 24
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	02 c0       	rjmp	.+4      	; 0x648 <DIO_write+0x7e>
 644:	88 0f       	add	r24, r24
 646:	99 1f       	adc	r25, r25
 648:	6a 95       	dec	r22
 64a:	e2 f7       	brpl	.-8      	; 0x644 <DIO_write+0x7a>
 64c:	82 2b       	or	r24, r18
 64e:	88 bb       	out	0x18, r24	; 24
 650:	08 95       	ret
			}
			else{	}
		break;
		case PORT_C:
			if(value == LOW)
 652:	41 11       	cpse	r20, r1
 654:	0c c0       	rjmp	.+24     	; 0x66e <DIO_write+0xa4>
			{
				CLEAR_BIT(PORTC,pinNumber);
 656:	25 b3       	in	r18, 0x15	; 21
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	02 c0       	rjmp	.+4      	; 0x662 <DIO_write+0x98>
 65e:	88 0f       	add	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	6a 95       	dec	r22
 664:	e2 f7       	brpl	.-8      	; 0x65e <DIO_write+0x94>
 666:	80 95       	com	r24
 668:	82 23       	and	r24, r18
 66a:	85 bb       	out	0x15, r24	; 21
 66c:	08 95       	ret
			}
			else if (value == HIGH)
 66e:	41 30       	cpi	r20, 0x01	; 1
 670:	29 f5       	brne	.+74     	; 0x6bc <DIO_write+0xf2>
			{
				SET_BIT(PORTC,pinNumber);
 672:	25 b3       	in	r18, 0x15	; 21
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <DIO_write+0xb4>
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	6a 95       	dec	r22
 680:	e2 f7       	brpl	.-8      	; 0x67a <DIO_write+0xb0>
 682:	82 2b       	or	r24, r18
 684:	85 bb       	out	0x15, r24	; 21
 686:	08 95       	ret
			}
			else{}
		break;
		case PORT_D:
			if(value == LOW)
 688:	41 11       	cpse	r20, r1
 68a:	0c c0       	rjmp	.+24     	; 0x6a4 <DIO_write+0xda>
			{
				CLEAR_BIT(PORTD,pinNumber);
 68c:	22 b3       	in	r18, 0x12	; 18
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_write+0xce>
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	6a 95       	dec	r22
 69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_write+0xca>
 69c:	80 95       	com	r24
 69e:	82 23       	and	r24, r18
 6a0:	82 bb       	out	0x12, r24	; 18
 6a2:	08 95       	ret
			}
			else if (value == HIGH)
 6a4:	41 30       	cpi	r20, 0x01	; 1
 6a6:	51 f4       	brne	.+20     	; 0x6bc <DIO_write+0xf2>
			{
				SET_BIT(PORTD,pinNumber);
 6a8:	22 b3       	in	r18, 0x12	; 18
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_write+0xea>
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	6a 95       	dec	r22
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_write+0xe6>
 6b8:	82 2b       	or	r24, r18
 6ba:	82 bb       	out	0x12, r24	; 18
 6bc:	08 95       	ret

000006be <__subsf3>:
 6be:	50 58       	subi	r21, 0x80	; 128

000006c0 <__addsf3>:
 6c0:	bb 27       	eor	r27, r27
 6c2:	aa 27       	eor	r26, r26
 6c4:	0e 94 77 03 	call	0x6ee	; 0x6ee <__addsf3x>
 6c8:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_round>
 6cc:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fp_pscA>
 6d0:	38 f0       	brcs	.+14     	; 0x6e0 <__addsf3+0x20>
 6d2:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_pscB>
 6d6:	20 f0       	brcs	.+8      	; 0x6e0 <__addsf3+0x20>
 6d8:	39 f4       	brne	.+14     	; 0x6e8 <__addsf3+0x28>
 6da:	9f 3f       	cpi	r25, 0xFF	; 255
 6dc:	19 f4       	brne	.+6      	; 0x6e4 <__addsf3+0x24>
 6de:	26 f4       	brtc	.+8      	; 0x6e8 <__addsf3+0x28>
 6e0:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_nan>
 6e4:	0e f4       	brtc	.+2      	; 0x6e8 <__addsf3+0x28>
 6e6:	e0 95       	com	r30
 6e8:	e7 fb       	bst	r30, 7
 6ea:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_inf>

000006ee <__addsf3x>:
 6ee:	e9 2f       	mov	r30, r25
 6f0:	0e 94 3b 05 	call	0xa76	; 0xa76 <__fp_split3>
 6f4:	58 f3       	brcs	.-42     	; 0x6cc <__addsf3+0xc>
 6f6:	ba 17       	cp	r27, r26
 6f8:	62 07       	cpc	r22, r18
 6fa:	73 07       	cpc	r23, r19
 6fc:	84 07       	cpc	r24, r20
 6fe:	95 07       	cpc	r25, r21
 700:	20 f0       	brcs	.+8      	; 0x70a <__addsf3x+0x1c>
 702:	79 f4       	brne	.+30     	; 0x722 <__addsf3x+0x34>
 704:	a6 f5       	brtc	.+104    	; 0x76e <__addsf3x+0x80>
 706:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_zero>
 70a:	0e f4       	brtc	.+2      	; 0x70e <__addsf3x+0x20>
 70c:	e0 95       	com	r30
 70e:	0b 2e       	mov	r0, r27
 710:	ba 2f       	mov	r27, r26
 712:	a0 2d       	mov	r26, r0
 714:	0b 01       	movw	r0, r22
 716:	b9 01       	movw	r22, r18
 718:	90 01       	movw	r18, r0
 71a:	0c 01       	movw	r0, r24
 71c:	ca 01       	movw	r24, r20
 71e:	a0 01       	movw	r20, r0
 720:	11 24       	eor	r1, r1
 722:	ff 27       	eor	r31, r31
 724:	59 1b       	sub	r21, r25
 726:	99 f0       	breq	.+38     	; 0x74e <__addsf3x+0x60>
 728:	59 3f       	cpi	r21, 0xF9	; 249
 72a:	50 f4       	brcc	.+20     	; 0x740 <__addsf3x+0x52>
 72c:	50 3e       	cpi	r21, 0xE0	; 224
 72e:	68 f1       	brcs	.+90     	; 0x78a <__addsf3x+0x9c>
 730:	1a 16       	cp	r1, r26
 732:	f0 40       	sbci	r31, 0x00	; 0
 734:	a2 2f       	mov	r26, r18
 736:	23 2f       	mov	r18, r19
 738:	34 2f       	mov	r19, r20
 73a:	44 27       	eor	r20, r20
 73c:	58 5f       	subi	r21, 0xF8	; 248
 73e:	f3 cf       	rjmp	.-26     	; 0x726 <__addsf3x+0x38>
 740:	46 95       	lsr	r20
 742:	37 95       	ror	r19
 744:	27 95       	ror	r18
 746:	a7 95       	ror	r26
 748:	f0 40       	sbci	r31, 0x00	; 0
 74a:	53 95       	inc	r21
 74c:	c9 f7       	brne	.-14     	; 0x740 <__addsf3x+0x52>
 74e:	7e f4       	brtc	.+30     	; 0x76e <__addsf3x+0x80>
 750:	1f 16       	cp	r1, r31
 752:	ba 0b       	sbc	r27, r26
 754:	62 0b       	sbc	r22, r18
 756:	73 0b       	sbc	r23, r19
 758:	84 0b       	sbc	r24, r20
 75a:	ba f0       	brmi	.+46     	; 0x78a <__addsf3x+0x9c>
 75c:	91 50       	subi	r25, 0x01	; 1
 75e:	a1 f0       	breq	.+40     	; 0x788 <__addsf3x+0x9a>
 760:	ff 0f       	add	r31, r31
 762:	bb 1f       	adc	r27, r27
 764:	66 1f       	adc	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	88 1f       	adc	r24, r24
 76a:	c2 f7       	brpl	.-16     	; 0x75c <__addsf3x+0x6e>
 76c:	0e c0       	rjmp	.+28     	; 0x78a <__addsf3x+0x9c>
 76e:	ba 0f       	add	r27, r26
 770:	62 1f       	adc	r22, r18
 772:	73 1f       	adc	r23, r19
 774:	84 1f       	adc	r24, r20
 776:	48 f4       	brcc	.+18     	; 0x78a <__addsf3x+0x9c>
 778:	87 95       	ror	r24
 77a:	77 95       	ror	r23
 77c:	67 95       	ror	r22
 77e:	b7 95       	ror	r27
 780:	f7 95       	ror	r31
 782:	9e 3f       	cpi	r25, 0xFE	; 254
 784:	08 f0       	brcs	.+2      	; 0x788 <__addsf3x+0x9a>
 786:	b0 cf       	rjmp	.-160    	; 0x6e8 <__addsf3+0x28>
 788:	93 95       	inc	r25
 78a:	88 0f       	add	r24, r24
 78c:	08 f0       	brcs	.+2      	; 0x790 <__addsf3x+0xa2>
 78e:	99 27       	eor	r25, r25
 790:	ee 0f       	add	r30, r30
 792:	97 95       	ror	r25
 794:	87 95       	ror	r24
 796:	08 95       	ret

00000798 <ceil>:
 798:	0e 94 5d 05 	call	0xaba	; 0xaba <__fp_trunc>
 79c:	90 f0       	brcs	.+36     	; 0x7c2 <ceil+0x2a>
 79e:	9f 37       	cpi	r25, 0x7F	; 127
 7a0:	48 f4       	brcc	.+18     	; 0x7b4 <ceil+0x1c>
 7a2:	91 11       	cpse	r25, r1
 7a4:	16 f4       	brtc	.+4      	; 0x7aa <ceil+0x12>
 7a6:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_szero>
 7aa:	60 e0       	ldi	r22, 0x00	; 0
 7ac:	70 e0       	ldi	r23, 0x00	; 0
 7ae:	80 e8       	ldi	r24, 0x80	; 128
 7b0:	9f e3       	ldi	r25, 0x3F	; 63
 7b2:	08 95       	ret
 7b4:	26 f0       	brts	.+8      	; 0x7be <ceil+0x26>
 7b6:	1b 16       	cp	r1, r27
 7b8:	61 1d       	adc	r22, r1
 7ba:	71 1d       	adc	r23, r1
 7bc:	81 1d       	adc	r24, r1
 7be:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__fp_mintl>
 7c2:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_mpack>

000007c6 <__cmpsf2>:
 7c6:	0e 94 c6 04 	call	0x98c	; 0x98c <__fp_cmp>
 7ca:	08 f4       	brcc	.+2      	; 0x7ce <__cmpsf2+0x8>
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	08 95       	ret

000007d0 <__divsf3>:
 7d0:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <__divsf3x>
 7d4:	0c 94 2a 05 	jmp	0xa54	; 0xa54 <__fp_round>
 7d8:	0e 94 23 05 	call	0xa46	; 0xa46 <__fp_pscB>
 7dc:	58 f0       	brcs	.+22     	; 0x7f4 <__divsf3+0x24>
 7de:	0e 94 1c 05 	call	0xa38	; 0xa38 <__fp_pscA>
 7e2:	40 f0       	brcs	.+16     	; 0x7f4 <__divsf3+0x24>
 7e4:	29 f4       	brne	.+10     	; 0x7f0 <__divsf3+0x20>
 7e6:	5f 3f       	cpi	r21, 0xFF	; 255
 7e8:	29 f0       	breq	.+10     	; 0x7f4 <__divsf3+0x24>
 7ea:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_inf>
 7ee:	51 11       	cpse	r21, r1
 7f0:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_szero>
 7f4:	0c 94 19 05 	jmp	0xa32	; 0xa32 <__fp_nan>

000007f8 <__divsf3x>:
 7f8:	0e 94 3b 05 	call	0xa76	; 0xa76 <__fp_split3>
 7fc:	68 f3       	brcs	.-38     	; 0x7d8 <__divsf3+0x8>

000007fe <__divsf3_pse>:
 7fe:	99 23       	and	r25, r25
 800:	b1 f3       	breq	.-20     	; 0x7ee <__divsf3+0x1e>
 802:	55 23       	and	r21, r21
 804:	91 f3       	breq	.-28     	; 0x7ea <__divsf3+0x1a>
 806:	95 1b       	sub	r25, r21
 808:	55 0b       	sbc	r21, r21
 80a:	bb 27       	eor	r27, r27
 80c:	aa 27       	eor	r26, r26
 80e:	62 17       	cp	r22, r18
 810:	73 07       	cpc	r23, r19
 812:	84 07       	cpc	r24, r20
 814:	38 f0       	brcs	.+14     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 816:	9f 5f       	subi	r25, 0xFF	; 255
 818:	5f 4f       	sbci	r21, 0xFF	; 255
 81a:	22 0f       	add	r18, r18
 81c:	33 1f       	adc	r19, r19
 81e:	44 1f       	adc	r20, r20
 820:	aa 1f       	adc	r26, r26
 822:	a9 f3       	breq	.-22     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 824:	35 d0       	rcall	.+106    	; 0x890 <__stack+0x31>
 826:	0e 2e       	mov	r0, r30
 828:	3a f0       	brmi	.+14     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 82a:	e0 e8       	ldi	r30, 0x80	; 128
 82c:	32 d0       	rcall	.+100    	; 0x892 <__stack+0x33>
 82e:	91 50       	subi	r25, 0x01	; 1
 830:	50 40       	sbci	r21, 0x00	; 0
 832:	e6 95       	lsr	r30
 834:	00 1c       	adc	r0, r0
 836:	ca f7       	brpl	.-14     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 838:	2b d0       	rcall	.+86     	; 0x890 <__stack+0x31>
 83a:	fe 2f       	mov	r31, r30
 83c:	29 d0       	rcall	.+82     	; 0x890 <__stack+0x31>
 83e:	66 0f       	add	r22, r22
 840:	77 1f       	adc	r23, r23
 842:	88 1f       	adc	r24, r24
 844:	bb 1f       	adc	r27, r27
 846:	26 17       	cp	r18, r22
 848:	37 07       	cpc	r19, r23
 84a:	48 07       	cpc	r20, r24
 84c:	ab 07       	cpc	r26, r27
 84e:	b0 e8       	ldi	r27, 0x80	; 128
 850:	09 f0       	breq	.+2      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 852:	bb 0b       	sbc	r27, r27
 854:	80 2d       	mov	r24, r0
 856:	bf 01       	movw	r22, r30
 858:	ff 27       	eor	r31, r31
 85a:	93 58       	subi	r25, 0x83	; 131
 85c:	5f 4f       	sbci	r21, 0xFF	; 255
 85e:	3a f0       	brmi	.+14     	; 0x86e <__stack+0xf>
 860:	9e 3f       	cpi	r25, 0xFE	; 254
 862:	51 05       	cpc	r21, r1
 864:	78 f0       	brcs	.+30     	; 0x884 <__stack+0x25>
 866:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_inf>
 86a:	0c 94 76 05 	jmp	0xaec	; 0xaec <__fp_szero>
 86e:	5f 3f       	cpi	r21, 0xFF	; 255
 870:	e4 f3       	brlt	.-8      	; 0x86a <__stack+0xb>
 872:	98 3e       	cpi	r25, 0xE8	; 232
 874:	d4 f3       	brlt	.-12     	; 0x86a <__stack+0xb>
 876:	86 95       	lsr	r24
 878:	77 95       	ror	r23
 87a:	67 95       	ror	r22
 87c:	b7 95       	ror	r27
 87e:	f7 95       	ror	r31
 880:	9f 5f       	subi	r25, 0xFF	; 255
 882:	c9 f7       	brne	.-14     	; 0x876 <__stack+0x17>
 884:	88 0f       	add	r24, r24
 886:	91 1d       	adc	r25, r1
 888:	96 95       	lsr	r25
 88a:	87 95       	ror	r24
 88c:	97 f9       	bld	r25, 7
 88e:	08 95       	ret
 890:	e1 e0       	ldi	r30, 0x01	; 1
 892:	66 0f       	add	r22, r22
 894:	77 1f       	adc	r23, r23
 896:	88 1f       	adc	r24, r24
 898:	bb 1f       	adc	r27, r27
 89a:	62 17       	cp	r22, r18
 89c:	73 07       	cpc	r23, r19
 89e:	84 07       	cpc	r24, r20
 8a0:	ba 07       	cpc	r27, r26
 8a2:	20 f0       	brcs	.+8      	; 0x8ac <__stack+0x4d>
 8a4:	62 1b       	sub	r22, r18
 8a6:	73 0b       	sbc	r23, r19
 8a8:	84 0b       	sbc	r24, r20
 8aa:	ba 0b       	sbc	r27, r26
 8ac:	ee 1f       	adc	r30, r30
 8ae:	88 f7       	brcc	.-30     	; 0x892 <__stack+0x33>
 8b0:	e0 95       	com	r30
 8b2:	08 95       	ret

000008b4 <__fixunssfsi>:
 8b4:	0e 94 43 05 	call	0xa86	; 0xa86 <__fp_splitA>
 8b8:	88 f0       	brcs	.+34     	; 0x8dc <__fixunssfsi+0x28>
 8ba:	9f 57       	subi	r25, 0x7F	; 127
 8bc:	98 f0       	brcs	.+38     	; 0x8e4 <__fixunssfsi+0x30>
 8be:	b9 2f       	mov	r27, r25
 8c0:	99 27       	eor	r25, r25
 8c2:	b7 51       	subi	r27, 0x17	; 23
 8c4:	b0 f0       	brcs	.+44     	; 0x8f2 <__fixunssfsi+0x3e>
 8c6:	e1 f0       	breq	.+56     	; 0x900 <__fixunssfsi+0x4c>
 8c8:	66 0f       	add	r22, r22
 8ca:	77 1f       	adc	r23, r23
 8cc:	88 1f       	adc	r24, r24
 8ce:	99 1f       	adc	r25, r25
 8d0:	1a f0       	brmi	.+6      	; 0x8d8 <__fixunssfsi+0x24>
 8d2:	ba 95       	dec	r27
 8d4:	c9 f7       	brne	.-14     	; 0x8c8 <__fixunssfsi+0x14>
 8d6:	14 c0       	rjmp	.+40     	; 0x900 <__fixunssfsi+0x4c>
 8d8:	b1 30       	cpi	r27, 0x01	; 1
 8da:	91 f0       	breq	.+36     	; 0x900 <__fixunssfsi+0x4c>
 8dc:	0e 94 75 05 	call	0xaea	; 0xaea <__fp_zero>
 8e0:	b1 e0       	ldi	r27, 0x01	; 1
 8e2:	08 95       	ret
 8e4:	0c 94 75 05 	jmp	0xaea	; 0xaea <__fp_zero>
 8e8:	67 2f       	mov	r22, r23
 8ea:	78 2f       	mov	r23, r24
 8ec:	88 27       	eor	r24, r24
 8ee:	b8 5f       	subi	r27, 0xF8	; 248
 8f0:	39 f0       	breq	.+14     	; 0x900 <__fixunssfsi+0x4c>
 8f2:	b9 3f       	cpi	r27, 0xF9	; 249
 8f4:	cc f3       	brlt	.-14     	; 0x8e8 <__fixunssfsi+0x34>
 8f6:	86 95       	lsr	r24
 8f8:	77 95       	ror	r23
 8fa:	67 95       	ror	r22
 8fc:	b3 95       	inc	r27
 8fe:	d9 f7       	brne	.-10     	; 0x8f6 <__fixunssfsi+0x42>
 900:	3e f4       	brtc	.+14     	; 0x910 <__fixunssfsi+0x5c>
 902:	90 95       	com	r25
 904:	80 95       	com	r24
 906:	70 95       	com	r23
 908:	61 95       	neg	r22
 90a:	7f 4f       	sbci	r23, 0xFF	; 255
 90c:	8f 4f       	sbci	r24, 0xFF	; 255
 90e:	9f 4f       	sbci	r25, 0xFF	; 255
 910:	08 95       	ret

00000912 <__floatunsisf>:
 912:	e8 94       	clt
 914:	09 c0       	rjmp	.+18     	; 0x928 <__floatsisf+0x12>

00000916 <__floatsisf>:
 916:	97 fb       	bst	r25, 7
 918:	3e f4       	brtc	.+14     	; 0x928 <__floatsisf+0x12>
 91a:	90 95       	com	r25
 91c:	80 95       	com	r24
 91e:	70 95       	com	r23
 920:	61 95       	neg	r22
 922:	7f 4f       	sbci	r23, 0xFF	; 255
 924:	8f 4f       	sbci	r24, 0xFF	; 255
 926:	9f 4f       	sbci	r25, 0xFF	; 255
 928:	99 23       	and	r25, r25
 92a:	a9 f0       	breq	.+42     	; 0x956 <__floatsisf+0x40>
 92c:	f9 2f       	mov	r31, r25
 92e:	96 e9       	ldi	r25, 0x96	; 150
 930:	bb 27       	eor	r27, r27
 932:	93 95       	inc	r25
 934:	f6 95       	lsr	r31
 936:	87 95       	ror	r24
 938:	77 95       	ror	r23
 93a:	67 95       	ror	r22
 93c:	b7 95       	ror	r27
 93e:	f1 11       	cpse	r31, r1
 940:	f8 cf       	rjmp	.-16     	; 0x932 <__floatsisf+0x1c>
 942:	fa f4       	brpl	.+62     	; 0x982 <__floatsisf+0x6c>
 944:	bb 0f       	add	r27, r27
 946:	11 f4       	brne	.+4      	; 0x94c <__floatsisf+0x36>
 948:	60 ff       	sbrs	r22, 0
 94a:	1b c0       	rjmp	.+54     	; 0x982 <__floatsisf+0x6c>
 94c:	6f 5f       	subi	r22, 0xFF	; 255
 94e:	7f 4f       	sbci	r23, 0xFF	; 255
 950:	8f 4f       	sbci	r24, 0xFF	; 255
 952:	9f 4f       	sbci	r25, 0xFF	; 255
 954:	16 c0       	rjmp	.+44     	; 0x982 <__floatsisf+0x6c>
 956:	88 23       	and	r24, r24
 958:	11 f0       	breq	.+4      	; 0x95e <__floatsisf+0x48>
 95a:	96 e9       	ldi	r25, 0x96	; 150
 95c:	11 c0       	rjmp	.+34     	; 0x980 <__floatsisf+0x6a>
 95e:	77 23       	and	r23, r23
 960:	21 f0       	breq	.+8      	; 0x96a <__floatsisf+0x54>
 962:	9e e8       	ldi	r25, 0x8E	; 142
 964:	87 2f       	mov	r24, r23
 966:	76 2f       	mov	r23, r22
 968:	05 c0       	rjmp	.+10     	; 0x974 <__floatsisf+0x5e>
 96a:	66 23       	and	r22, r22
 96c:	71 f0       	breq	.+28     	; 0x98a <__floatsisf+0x74>
 96e:	96 e8       	ldi	r25, 0x86	; 134
 970:	86 2f       	mov	r24, r22
 972:	70 e0       	ldi	r23, 0x00	; 0
 974:	60 e0       	ldi	r22, 0x00	; 0
 976:	2a f0       	brmi	.+10     	; 0x982 <__floatsisf+0x6c>
 978:	9a 95       	dec	r25
 97a:	66 0f       	add	r22, r22
 97c:	77 1f       	adc	r23, r23
 97e:	88 1f       	adc	r24, r24
 980:	da f7       	brpl	.-10     	; 0x978 <__floatsisf+0x62>
 982:	88 0f       	add	r24, r24
 984:	96 95       	lsr	r25
 986:	87 95       	ror	r24
 988:	97 f9       	bld	r25, 7
 98a:	08 95       	ret

0000098c <__fp_cmp>:
 98c:	99 0f       	add	r25, r25
 98e:	00 08       	sbc	r0, r0
 990:	55 0f       	add	r21, r21
 992:	aa 0b       	sbc	r26, r26
 994:	e0 e8       	ldi	r30, 0x80	; 128
 996:	fe ef       	ldi	r31, 0xFE	; 254
 998:	16 16       	cp	r1, r22
 99a:	17 06       	cpc	r1, r23
 99c:	e8 07       	cpc	r30, r24
 99e:	f9 07       	cpc	r31, r25
 9a0:	c0 f0       	brcs	.+48     	; 0x9d2 <__fp_cmp+0x46>
 9a2:	12 16       	cp	r1, r18
 9a4:	13 06       	cpc	r1, r19
 9a6:	e4 07       	cpc	r30, r20
 9a8:	f5 07       	cpc	r31, r21
 9aa:	98 f0       	brcs	.+38     	; 0x9d2 <__fp_cmp+0x46>
 9ac:	62 1b       	sub	r22, r18
 9ae:	73 0b       	sbc	r23, r19
 9b0:	84 0b       	sbc	r24, r20
 9b2:	95 0b       	sbc	r25, r21
 9b4:	39 f4       	brne	.+14     	; 0x9c4 <__fp_cmp+0x38>
 9b6:	0a 26       	eor	r0, r26
 9b8:	61 f0       	breq	.+24     	; 0x9d2 <__fp_cmp+0x46>
 9ba:	23 2b       	or	r18, r19
 9bc:	24 2b       	or	r18, r20
 9be:	25 2b       	or	r18, r21
 9c0:	21 f4       	brne	.+8      	; 0x9ca <__fp_cmp+0x3e>
 9c2:	08 95       	ret
 9c4:	0a 26       	eor	r0, r26
 9c6:	09 f4       	brne	.+2      	; 0x9ca <__fp_cmp+0x3e>
 9c8:	a1 40       	sbci	r26, 0x01	; 1
 9ca:	a6 95       	lsr	r26
 9cc:	8f ef       	ldi	r24, 0xFF	; 255
 9ce:	81 1d       	adc	r24, r1
 9d0:	81 1d       	adc	r24, r1
 9d2:	08 95       	ret

000009d4 <__fp_inf>:
 9d4:	97 f9       	bld	r25, 7
 9d6:	9f 67       	ori	r25, 0x7F	; 127
 9d8:	80 e8       	ldi	r24, 0x80	; 128
 9da:	70 e0       	ldi	r23, 0x00	; 0
 9dc:	60 e0       	ldi	r22, 0x00	; 0
 9de:	08 95       	ret

000009e0 <__fp_mintl>:
 9e0:	88 23       	and	r24, r24
 9e2:	71 f4       	brne	.+28     	; 0xa00 <__fp_mintl+0x20>
 9e4:	77 23       	and	r23, r23
 9e6:	21 f0       	breq	.+8      	; 0x9f0 <__fp_mintl+0x10>
 9e8:	98 50       	subi	r25, 0x08	; 8
 9ea:	87 2b       	or	r24, r23
 9ec:	76 2f       	mov	r23, r22
 9ee:	07 c0       	rjmp	.+14     	; 0x9fe <__fp_mintl+0x1e>
 9f0:	66 23       	and	r22, r22
 9f2:	11 f4       	brne	.+4      	; 0x9f8 <__fp_mintl+0x18>
 9f4:	99 27       	eor	r25, r25
 9f6:	0d c0       	rjmp	.+26     	; 0xa12 <__fp_mintl+0x32>
 9f8:	90 51       	subi	r25, 0x10	; 16
 9fa:	86 2b       	or	r24, r22
 9fc:	70 e0       	ldi	r23, 0x00	; 0
 9fe:	60 e0       	ldi	r22, 0x00	; 0
 a00:	2a f0       	brmi	.+10     	; 0xa0c <__fp_mintl+0x2c>
 a02:	9a 95       	dec	r25
 a04:	66 0f       	add	r22, r22
 a06:	77 1f       	adc	r23, r23
 a08:	88 1f       	adc	r24, r24
 a0a:	da f7       	brpl	.-10     	; 0xa02 <__fp_mintl+0x22>
 a0c:	88 0f       	add	r24, r24
 a0e:	96 95       	lsr	r25
 a10:	87 95       	ror	r24
 a12:	97 f9       	bld	r25, 7
 a14:	08 95       	ret

00000a16 <__fp_mpack>:
 a16:	9f 3f       	cpi	r25, 0xFF	; 255
 a18:	31 f0       	breq	.+12     	; 0xa26 <__fp_mpack_finite+0xc>

00000a1a <__fp_mpack_finite>:
 a1a:	91 50       	subi	r25, 0x01	; 1
 a1c:	20 f4       	brcc	.+8      	; 0xa26 <__fp_mpack_finite+0xc>
 a1e:	87 95       	ror	r24
 a20:	77 95       	ror	r23
 a22:	67 95       	ror	r22
 a24:	b7 95       	ror	r27
 a26:	88 0f       	add	r24, r24
 a28:	91 1d       	adc	r25, r1
 a2a:	96 95       	lsr	r25
 a2c:	87 95       	ror	r24
 a2e:	97 f9       	bld	r25, 7
 a30:	08 95       	ret

00000a32 <__fp_nan>:
 a32:	9f ef       	ldi	r25, 0xFF	; 255
 a34:	80 ec       	ldi	r24, 0xC0	; 192
 a36:	08 95       	ret

00000a38 <__fp_pscA>:
 a38:	00 24       	eor	r0, r0
 a3a:	0a 94       	dec	r0
 a3c:	16 16       	cp	r1, r22
 a3e:	17 06       	cpc	r1, r23
 a40:	18 06       	cpc	r1, r24
 a42:	09 06       	cpc	r0, r25
 a44:	08 95       	ret

00000a46 <__fp_pscB>:
 a46:	00 24       	eor	r0, r0
 a48:	0a 94       	dec	r0
 a4a:	12 16       	cp	r1, r18
 a4c:	13 06       	cpc	r1, r19
 a4e:	14 06       	cpc	r1, r20
 a50:	05 06       	cpc	r0, r21
 a52:	08 95       	ret

00000a54 <__fp_round>:
 a54:	09 2e       	mov	r0, r25
 a56:	03 94       	inc	r0
 a58:	00 0c       	add	r0, r0
 a5a:	11 f4       	brne	.+4      	; 0xa60 <__fp_round+0xc>
 a5c:	88 23       	and	r24, r24
 a5e:	52 f0       	brmi	.+20     	; 0xa74 <__fp_round+0x20>
 a60:	bb 0f       	add	r27, r27
 a62:	40 f4       	brcc	.+16     	; 0xa74 <__fp_round+0x20>
 a64:	bf 2b       	or	r27, r31
 a66:	11 f4       	brne	.+4      	; 0xa6c <__fp_round+0x18>
 a68:	60 ff       	sbrs	r22, 0
 a6a:	04 c0       	rjmp	.+8      	; 0xa74 <__fp_round+0x20>
 a6c:	6f 5f       	subi	r22, 0xFF	; 255
 a6e:	7f 4f       	sbci	r23, 0xFF	; 255
 a70:	8f 4f       	sbci	r24, 0xFF	; 255
 a72:	9f 4f       	sbci	r25, 0xFF	; 255
 a74:	08 95       	ret

00000a76 <__fp_split3>:
 a76:	57 fd       	sbrc	r21, 7
 a78:	90 58       	subi	r25, 0x80	; 128
 a7a:	44 0f       	add	r20, r20
 a7c:	55 1f       	adc	r21, r21
 a7e:	59 f0       	breq	.+22     	; 0xa96 <__fp_splitA+0x10>
 a80:	5f 3f       	cpi	r21, 0xFF	; 255
 a82:	71 f0       	breq	.+28     	; 0xaa0 <__fp_splitA+0x1a>
 a84:	47 95       	ror	r20

00000a86 <__fp_splitA>:
 a86:	88 0f       	add	r24, r24
 a88:	97 fb       	bst	r25, 7
 a8a:	99 1f       	adc	r25, r25
 a8c:	61 f0       	breq	.+24     	; 0xaa6 <__fp_splitA+0x20>
 a8e:	9f 3f       	cpi	r25, 0xFF	; 255
 a90:	79 f0       	breq	.+30     	; 0xab0 <__fp_splitA+0x2a>
 a92:	87 95       	ror	r24
 a94:	08 95       	ret
 a96:	12 16       	cp	r1, r18
 a98:	13 06       	cpc	r1, r19
 a9a:	14 06       	cpc	r1, r20
 a9c:	55 1f       	adc	r21, r21
 a9e:	f2 cf       	rjmp	.-28     	; 0xa84 <__fp_split3+0xe>
 aa0:	46 95       	lsr	r20
 aa2:	f1 df       	rcall	.-30     	; 0xa86 <__fp_splitA>
 aa4:	08 c0       	rjmp	.+16     	; 0xab6 <__fp_splitA+0x30>
 aa6:	16 16       	cp	r1, r22
 aa8:	17 06       	cpc	r1, r23
 aaa:	18 06       	cpc	r1, r24
 aac:	99 1f       	adc	r25, r25
 aae:	f1 cf       	rjmp	.-30     	; 0xa92 <__fp_splitA+0xc>
 ab0:	86 95       	lsr	r24
 ab2:	71 05       	cpc	r23, r1
 ab4:	61 05       	cpc	r22, r1
 ab6:	08 94       	sec
 ab8:	08 95       	ret

00000aba <__fp_trunc>:
 aba:	0e 94 43 05 	call	0xa86	; 0xa86 <__fp_splitA>
 abe:	a0 f0       	brcs	.+40     	; 0xae8 <__fp_trunc+0x2e>
 ac0:	be e7       	ldi	r27, 0x7E	; 126
 ac2:	b9 17       	cp	r27, r25
 ac4:	88 f4       	brcc	.+34     	; 0xae8 <__fp_trunc+0x2e>
 ac6:	bb 27       	eor	r27, r27
 ac8:	9f 38       	cpi	r25, 0x8F	; 143
 aca:	60 f4       	brcc	.+24     	; 0xae4 <__fp_trunc+0x2a>
 acc:	16 16       	cp	r1, r22
 ace:	b1 1d       	adc	r27, r1
 ad0:	67 2f       	mov	r22, r23
 ad2:	78 2f       	mov	r23, r24
 ad4:	88 27       	eor	r24, r24
 ad6:	98 5f       	subi	r25, 0xF8	; 248
 ad8:	f7 cf       	rjmp	.-18     	; 0xac8 <__fp_trunc+0xe>
 ada:	86 95       	lsr	r24
 adc:	77 95       	ror	r23
 ade:	67 95       	ror	r22
 ae0:	b1 1d       	adc	r27, r1
 ae2:	93 95       	inc	r25
 ae4:	96 39       	cpi	r25, 0x96	; 150
 ae6:	c8 f3       	brcs	.-14     	; 0xada <__fp_trunc+0x20>
 ae8:	08 95       	ret

00000aea <__fp_zero>:
 aea:	e8 94       	clt

00000aec <__fp_szero>:
 aec:	bb 27       	eor	r27, r27
 aee:	66 27       	eor	r22, r22
 af0:	77 27       	eor	r23, r23
 af2:	cb 01       	movw	r24, r22
 af4:	97 f9       	bld	r25, 7
 af6:	08 95       	ret

00000af8 <_exit>:
 af8:	f8 94       	cli

00000afa <__stop_program>:
 afa:	ff cf       	rjmp	.-2      	; 0xafa <__stop_program>
